// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Player.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Player_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Player_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Player_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Player_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Player_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_Player_2eproto_metadata_getter(int index);
namespace player {
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace player
PROTOBUF_NAMESPACE_OPEN
template<> ::player::Request* Arena::CreateMaybeMessage<::player::Request>(Arena*);
template<> ::player::Response* Arena::CreateMaybeMessage<::player::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace player {

enum Request_RequestType : int {
  Request_RequestType_INVAL = 0,
  Request_RequestType_LOGIN = 1,
  Request_RequestType_SIGNUP = 14,
  Request_RequestType_RANK_ME = 16,
  Request_RequestType_RANK_TOP = 17,
  Request_RequestType_ADD_FRIEND = 18,
  Request_RequestType_ACCEPT_FRIEND = 19,
  Request_RequestType_DELETE_FRIEND = 20,
  Request_RequestType_LIST_FRIEND = 21,
  Request_RequestType_LIST_MATCH = 22,
  Request_RequestType_LIST_WAITTING = 23,
  Request_RequestType_GET_NAME = 25,
  Request_RequestType_GET_UID = 26,
  Request_RequestType_GET_PASSWORD = 27,
  Request_RequestType_GET_SCORE = 28,
  Request_RequestType_Request_RequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Request_RequestType_Request_RequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Request_RequestType_IsValid(int value);
constexpr Request_RequestType Request_RequestType_RequestType_MIN = Request_RequestType_INVAL;
constexpr Request_RequestType Request_RequestType_RequestType_MAX = Request_RequestType_GET_SCORE;
constexpr int Request_RequestType_RequestType_ARRAYSIZE = Request_RequestType_RequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_RequestType_descriptor();
template<typename T>
inline const std::string& Request_RequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Request_RequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Request_RequestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Request_RequestType_descriptor(), enum_t_value);
}
inline bool Request_RequestType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Request_RequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Request_RequestType>(
    Request_RequestType_descriptor(), name, value);
}
// ===================================================================

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  virtual ~Request();
  explicit constexpr Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Player_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Request_RequestType RequestType;
  static constexpr RequestType INVAL =
    Request_RequestType_INVAL;
  static constexpr RequestType LOGIN =
    Request_RequestType_LOGIN;
  static constexpr RequestType SIGNUP =
    Request_RequestType_SIGNUP;
  static constexpr RequestType RANK_ME =
    Request_RequestType_RANK_ME;
  static constexpr RequestType RANK_TOP =
    Request_RequestType_RANK_TOP;
  static constexpr RequestType ADD_FRIEND =
    Request_RequestType_ADD_FRIEND;
  static constexpr RequestType ACCEPT_FRIEND =
    Request_RequestType_ACCEPT_FRIEND;
  static constexpr RequestType DELETE_FRIEND =
    Request_RequestType_DELETE_FRIEND;
  static constexpr RequestType LIST_FRIEND =
    Request_RequestType_LIST_FRIEND;
  static constexpr RequestType LIST_MATCH =
    Request_RequestType_LIST_MATCH;
  static constexpr RequestType LIST_WAITTING =
    Request_RequestType_LIST_WAITTING;
  static constexpr RequestType GET_NAME =
    Request_RequestType_GET_NAME;
  static constexpr RequestType GET_UID =
    Request_RequestType_GET_UID;
  static constexpr RequestType GET_PASSWORD =
    Request_RequestType_GET_PASSWORD;
  static constexpr RequestType GET_SCORE =
    Request_RequestType_GET_SCORE;
  static inline bool RequestType_IsValid(int value) {
    return Request_RequestType_IsValid(value);
  }
  static constexpr RequestType RequestType_MIN =
    Request_RequestType_RequestType_MIN;
  static constexpr RequestType RequestType_MAX =
    Request_RequestType_RequestType_MAX;
  static constexpr int RequestType_ARRAYSIZE =
    Request_RequestType_RequestType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RequestType_descriptor() {
    return Request_RequestType_descriptor();
  }
  template<typename T>
  static inline const std::string& RequestType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RequestType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RequestType_Name.");
    return Request_RequestType_Name(enum_t_value);
  }
  static inline bool RequestType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RequestType* value) {
    return Request_RequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 4,
    kUidFieldNumber = 2,
    kStampFieldNumber = 3,
    kRequestTypeFieldNumber = 1,
  };
  // repeated string args = 4;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  const std::string& args(int index) const;
  std::string* mutable_args(int index);
  void set_args(int index, const std::string& value);
  void set_args(int index, std::string&& value);
  void set_args(int index, const char* value);
  void set_args(int index, const char* value, size_t size);
  std::string* add_args();
  void add_args(const std::string& value);
  void add_args(std::string&& value);
  void add_args(const char* value);
  void add_args(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_args();
  private:
  const std::string& _internal_args(int index) const;
  std::string* _internal_add_args();
  public:

  // int64 uid = 2;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 stamp = 3;
  bool has_stamp() const;
  private:
  bool _internal_has_stamp() const;
  public:
  void clear_stamp();
  ::PROTOBUF_NAMESPACE_ID::int64 stamp() const;
  void set_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_stamp() const;
  void _internal_set_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .player.Request.RequestType requestType = 1;
  bool has_requesttype() const;
  private:
  bool _internal_has_requesttype() const;
  public:
  void clear_requesttype();
  ::player::Request_RequestType requesttype() const;
  void set_requesttype(::player::Request_RequestType value);
  private:
  ::player::Request_RequestType _internal_requesttype() const;
  void _internal_set_requesttype(::player::Request_RequestType value);
  public:

  // @@protoc_insertion_point(class_scope:player.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> args_;
  ::PROTOBUF_NAMESPACE_ID::int64 uid_;
  ::PROTOBUF_NAMESPACE_ID::int64 stamp_;
  int requesttype_;
  friend struct ::TableStruct_Player_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  virtual ~Response();
  explicit constexpr Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Player_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 4,
    kStatusFieldNumber = 1,
    kUidFieldNumber = 2,
    kStampFieldNumber = 3,
  };
  // repeated string args = 4;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  const std::string& args(int index) const;
  std::string* mutable_args(int index);
  void set_args(int index, const std::string& value);
  void set_args(int index, std::string&& value);
  void set_args(int index, const char* value);
  void set_args(int index, const char* value, size_t size);
  std::string* add_args();
  void add_args(const std::string& value);
  void add_args(std::string&& value);
  void add_args(const char* value);
  void add_args(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_args();
  private:
  const std::string& _internal_args(int index) const;
  std::string* _internal_add_args();
  public:

  // int64 status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int64 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 uid = 2;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 stamp = 3;
  bool has_stamp() const;
  private:
  bool _internal_has_stamp() const;
  public:
  void clear_stamp();
  ::PROTOBUF_NAMESPACE_ID::int64 stamp() const;
  void set_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_stamp() const;
  void _internal_set_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:player.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> args_;
  ::PROTOBUF_NAMESPACE_ID::int64 status_;
  ::PROTOBUF_NAMESPACE_ID::int64 uid_;
  ::PROTOBUF_NAMESPACE_ID::int64 stamp_;
  friend struct ::TableStruct_Player_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// .player.Request.RequestType requestType = 1;
inline bool Request::_internal_has_requesttype() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Request::has_requesttype() const {
  return _internal_has_requesttype();
}
inline void Request::clear_requesttype() {
  requesttype_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::player::Request_RequestType Request::_internal_requesttype() const {
  return static_cast< ::player::Request_RequestType >(requesttype_);
}
inline ::player::Request_RequestType Request::requesttype() const {
  // @@protoc_insertion_point(field_get:player.Request.requestType)
  return _internal_requesttype();
}
inline void Request::_internal_set_requesttype(::player::Request_RequestType value) {
  _has_bits_[0] |= 0x00000004u;
  requesttype_ = value;
}
inline void Request::set_requesttype(::player::Request_RequestType value) {
  _internal_set_requesttype(value);
  // @@protoc_insertion_point(field_set:player.Request.requestType)
}

// int64 uid = 2;
inline bool Request::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request::has_uid() const {
  return _internal_has_uid();
}
inline void Request::clear_uid() {
  uid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Request::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Request::uid() const {
  // @@protoc_insertion_point(field_get:player.Request.uid)
  return _internal_uid();
}
inline void Request::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  uid_ = value;
}
inline void Request::set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:player.Request.uid)
}

// int64 stamp = 3;
inline bool Request::_internal_has_stamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request::has_stamp() const {
  return _internal_has_stamp();
}
inline void Request::clear_stamp() {
  stamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Request::_internal_stamp() const {
  return stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Request::stamp() const {
  // @@protoc_insertion_point(field_get:player.Request.stamp)
  return _internal_stamp();
}
inline void Request::_internal_set_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  stamp_ = value;
}
inline void Request::set_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_stamp(value);
  // @@protoc_insertion_point(field_set:player.Request.stamp)
}

// repeated string args = 4;
inline int Request::_internal_args_size() const {
  return args_.size();
}
inline int Request::args_size() const {
  return _internal_args_size();
}
inline void Request::clear_args() {
  args_.Clear();
}
inline std::string* Request::add_args() {
  // @@protoc_insertion_point(field_add_mutable:player.Request.args)
  return _internal_add_args();
}
inline const std::string& Request::_internal_args(int index) const {
  return args_.Get(index);
}
inline const std::string& Request::args(int index) const {
  // @@protoc_insertion_point(field_get:player.Request.args)
  return _internal_args(index);
}
inline std::string* Request::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:player.Request.args)
  return args_.Mutable(index);
}
inline void Request::set_args(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:player.Request.args)
  args_.Mutable(index)->assign(value);
}
inline void Request::set_args(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:player.Request.args)
  args_.Mutable(index)->assign(std::move(value));
}
inline void Request::set_args(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:player.Request.args)
}
inline void Request::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:player.Request.args)
}
inline std::string* Request::_internal_add_args() {
  return args_.Add();
}
inline void Request::add_args(const std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:player.Request.args)
}
inline void Request::add_args(std::string&& value) {
  args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:player.Request.args)
}
inline void Request::add_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:player.Request.args)
}
inline void Request::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:player.Request.args)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Request::args() const {
  // @@protoc_insertion_point(field_list:player.Request.args)
  return args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Request::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:player.Request.args)
  return &args_;
}

// -------------------------------------------------------------------

// Response

// int64 status = 1;
inline bool Response::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response::has_status() const {
  return _internal_has_status();
}
inline void Response::clear_status() {
  status_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Response::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Response::status() const {
  // @@protoc_insertion_point(field_get:player.Response.status)
  return _internal_status();
}
inline void Response::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void Response::set_status(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:player.Response.status)
}

// int64 uid = 2;
inline bool Response::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Response::has_uid() const {
  return _internal_has_uid();
}
inline void Response::clear_uid() {
  uid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Response::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Response::uid() const {
  // @@protoc_insertion_point(field_get:player.Response.uid)
  return _internal_uid();
}
inline void Response::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  uid_ = value;
}
inline void Response::set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:player.Response.uid)
}

// int64 stamp = 3;
inline bool Response::_internal_has_stamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Response::has_stamp() const {
  return _internal_has_stamp();
}
inline void Response::clear_stamp() {
  stamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Response::_internal_stamp() const {
  return stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Response::stamp() const {
  // @@protoc_insertion_point(field_get:player.Response.stamp)
  return _internal_stamp();
}
inline void Response::_internal_set_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  stamp_ = value;
}
inline void Response::set_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_stamp(value);
  // @@protoc_insertion_point(field_set:player.Response.stamp)
}

// repeated string args = 4;
inline int Response::_internal_args_size() const {
  return args_.size();
}
inline int Response::args_size() const {
  return _internal_args_size();
}
inline void Response::clear_args() {
  args_.Clear();
}
inline std::string* Response::add_args() {
  // @@protoc_insertion_point(field_add_mutable:player.Response.args)
  return _internal_add_args();
}
inline const std::string& Response::_internal_args(int index) const {
  return args_.Get(index);
}
inline const std::string& Response::args(int index) const {
  // @@protoc_insertion_point(field_get:player.Response.args)
  return _internal_args(index);
}
inline std::string* Response::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:player.Response.args)
  return args_.Mutable(index);
}
inline void Response::set_args(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:player.Response.args)
  args_.Mutable(index)->assign(value);
}
inline void Response::set_args(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:player.Response.args)
  args_.Mutable(index)->assign(std::move(value));
}
inline void Response::set_args(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:player.Response.args)
}
inline void Response::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:player.Response.args)
}
inline std::string* Response::_internal_add_args() {
  return args_.Add();
}
inline void Response::add_args(const std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:player.Response.args)
}
inline void Response::add_args(std::string&& value) {
  args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:player.Response.args)
}
inline void Response::add_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:player.Response.args)
}
inline void Response::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:player.Response.args)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Response::args() const {
  // @@protoc_insertion_point(field_list:player.Response.args)
  return args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Response::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:player.Response.args)
  return &args_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace player

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::player::Request_RequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::player::Request_RequestType>() {
  return ::player::Request_RequestType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Player_2eproto
