// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Player.proto

#include "Player.pb.h"
#include "Player.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace player {

static const char* DatabaseService_method_names[] = {
  "/player.DatabaseService/RequestDB",
};

std::unique_ptr< DatabaseService::Stub> DatabaseService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DatabaseService::Stub> stub(new DatabaseService::Stub(channel, options));
  return stub;
}

DatabaseService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RequestDB_(DatabaseService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DatabaseService::Stub::RequestDB(::grpc::ClientContext* context, const ::player::Request& request, ::player::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::player::Request, ::player::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestDB_, context, request, response);
}

void DatabaseService::Stub::experimental_async::RequestDB(::grpc::ClientContext* context, const ::player::Request* request, ::player::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::player::Request, ::player::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestDB_, context, request, response, std::move(f));
}

void DatabaseService::Stub::experimental_async::RequestDB(::grpc::ClientContext* context, const ::player::Request* request, ::player::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestDB_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::player::Response>* DatabaseService::Stub::PrepareAsyncRequestDBRaw(::grpc::ClientContext* context, const ::player::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::player::Response, ::player::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestDB_, context, request);
}

::grpc::ClientAsyncResponseReader< ::player::Response>* DatabaseService::Stub::AsyncRequestDBRaw(::grpc::ClientContext* context, const ::player::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestDBRaw(context, request, cq);
  result->StartCall();
  return result;
}

DatabaseService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseService::Service, ::player::Request, ::player::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatabaseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::player::Request* req,
             ::player::Response* resp) {
               return service->RequestDB(ctx, req, resp);
             }, this)));
}

DatabaseService::Service::~Service() {
}

::grpc::Status DatabaseService::Service::RequestDB(::grpc::ServerContext* context, const ::player::Request* request, ::player::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace player

